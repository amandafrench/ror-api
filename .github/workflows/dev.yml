name: Deploy Dev
on:
  push:
    branches:
      - "dev"
jobs:
  build:
    runs-on: ubuntu-latest
    env:
      ELASTIC_HOST: "localhost"
      ELASTIC_PASSWORD: "changeme"
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
    services:
      elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:6.3.2
        env:
          discovery.type: single-node
          ES_JAVA_OPTS: -Xms512m -Xmx512m
          ELASTIC_PASSWORD: changeme
          xpack.security.enabled: "false"
          http.cors.enabled: "true"
          http.cors.allow-origin: "*"
        ports:
          - 9200:9200
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Build docker image
        uses: whoan/docker-build-with-cache-action@v5
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          image_name: rorcommunity/ror-api
          image_tag: dev
          push_image_and_stages: false
      - name: Setup
        env:
          ELASTIC_HOST: "localhost"
        run: |
          ls -l
          docker run -d --name web rorcommunity/ror-api
          docker exec web python manage.py setup
      - name: Test
        env:
          ELASTIC_HOST: "localhost"
        run: |
          docker exec web python manage.py test rorapi.tests
          docker exec web python manage.py test rorapi.tests_integration
          docker exec web python manage.py test rorapi.tests_functional

      # - name: Cache dependency
      #   uses: actions/cache@v2
      #   with:
      #     path: ~/.cache/pip
      #     key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
      #     restore-keys: |
      #       ${{ runner.os }}-pip-
      # - name: Set up Python environment
      #   uses: actions/setup-python@v2
      #   with:
      #     python-version: '3.8'
      # - name: Install requirements
      #   run: |
      #     python -m pip install --upgrade pip
      #     pip install -r requirements.txt
      #     pip install yapf
          
      #     python manage.py collectstatic --noinput
      # - name: Setup
      #   run: |
      #     python manage.py setup
      # - name: Test
      #   run: |
      #     python manage.py test rorapi.tests
      #     python manage.py test rorapi.tests_integration
      #     python manage.py test rorapi.tests_functional
      # - name: Publish code coverage
      #   uses: paambaati/codeclimate-action@v2.7.5
      #   env:
      #     CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}
  
  deploy:
    needs: build
    runs-on: ubuntu-latest
    env:
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Extract variables
        shell: bash
        run: |
          echo "::set-output name=BRANCH::$(echo ${GITHUB_REF#refs/heads/} | sed 's/\//_/g')"
          echo "::set-output name=TAG::$(git tag --points-at HEAD)"
          echo "::set-output name=GIT_SHA::$(git rev-parse HEAD)"
          echo "::set-output name=GIT_SHA_SHORT::$(git rev-parse --short HEAD)"  
        id: extract_variables

      - name: Checkout terraform config repo
        uses: actions/checkout@v2
        with:
          # public repo with terraform configuration
          repository: 'ror-community/new-deployment'
          persist-credentials: false
      - name: Commit changes to terraform config repository
        # use go template in terraform config repository to update git sha and tag
        # commit and push changes to trigger terraform workflow
        run: |
          export GIT_SHA=${{ steps.extract_variables.outputs.GIT_SHA_SHORT }}
          export GIT_TAG=${{ steps.extract_variables.outputs.GIT_TAG }}
          wget https://github.com/jwilder/dockerize/releases/download/v0.6.0/dockerize-linux-amd64-v0.6.0.tar.gz
          tar -xzvf dockerize-linux-amd64-v0.6.0.tar.gz
          rm dockerize-linux-amd64-v0.6.0.tar.gz
          ./dockerize -template ror/services/api/_ror-api-dev.auto.tfvars.tmpl:ror/services/api/_ror-api-dev.auto.tfvars
          
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add ror/services/api/_ror-api-dev.auto.tfvars
          git commit -m "Adding ror-api git variables for commit ${{ steps.extract_variables.outputs.GIT_SHA }}"
      - name: Push changes
        uses: ad-m/github-push-action@v0.6.0
        with:
          github_token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          repository: 'ror-community/new-deployment'
          branch: 'refs/heads/master'
          tags: false

      - name: Notify Slack
        uses: edge/simple-slack-notify@master
        with:
          channel: '#deployment-updates'
          color: 'good'
          text: 'A new version of the <https://api.dev.ror.org|REST API> is deployed to dev.'
          failure_text: '${env.GITHUB_WORKFLOW} (${env.GITHUB_RUN_NUMBER}) build failed'
          fields: |
            [{ "title": "Commit message", "value": "${{ github.event.head_commit.message }}" },
             { "title": "Committed by", "value": "<https://github.com/${{ github.repository }}/commits?author=${{ github.actor }}|${{ github.actor }}>", "short": true },
             { "title": "Commit SHA", "value": "<https://github.com/${{ github.repository }}/commit/${{ steps.extract_variables.outputs.GIT_SHA }}|${{ steps.extract_variables.outputs.GIT_SHA_SHORT }}>", "short": true },
             { "title": "Repository", "value": "<https://github.com/${{ github.repository }}|${{ github.repository }}>", "short": true },
             { "title": "Branch", "value": "<https://github.com/${{ github.repository }}/tree/${{ steps.extract_variables.outputs.BRANCH }}|${{ steps.extract_variables.outputs.BRANCH }}>", "short": true }]
